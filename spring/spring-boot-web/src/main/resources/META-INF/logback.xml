<?xml version="1.0" encoding="UTF-8"?>
<!-- 每隔30秒扫描一次xml配置 -->
<configuration scan="true" scanPeriod="30 seconds" debug="false" packagingData="true">

    <!-- 应用名称 -->
    <contextName>boot-web</contextName>
    <!-- 属性变量 -->
    <property name="LOG_HOME" value="/data/log" />
    <!-- 当前时间戳 -->
    <timestamp key="curDateTime" datePattern="yyyyMMdd'T'HHmmss" />
    <timestamp key="curDate" datePattern="yyyyMMdd" />
    <!-- <timestamp key="curDateTime" datePattern="yyyyMMdd'T'HHmmss" timeReference="contextBirth"/> -->



    <!-- ##################### appender ##################### -->
    <!-- 格式化输出特殊符 
            %d{HH:mm:ss.SSS}    日志输出时间 
            %thread             输出日志的进程名字，这在Web应用以及异步任务处理中很有用 
            %-5level            日志级别，并且使用5个字符靠左对齐 
            %logger{36}         日志输出者的名字 
            %msg                日志消息 
            %n                  平台的换行符
    -->

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 过滤器，一个appender可以有多个 -->
        <!-- 阈值过滤，就是log行为级别过滤，debug及debug以上的信息会被打印出来 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>
    
    <!-- 输出到文件 -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!-- 读取定义的LOG_HOME变量 -->
        <file>${LOG_HOME}/game_log.log</file>
        <encoder>
            <!-- %date和%d是一个意思 %file是所在文件 %line是所在行 -->
            <pattern>%date %level [%thread] %logger{30} [%file:%line] %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 输出到HTML格式的文件 -->
    <appender name="HTML_FILE" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_HOME}/game_log.${curDateTime}.html</file>
        <!-- 过滤器，这个过滤器是行为过滤器，直接过滤掉了除debug外所有的行为信息 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%relative%thread%mdc%level%logger%msg</pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 滚动文件 -->
    <appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当project等于true的时候file就不会起效果 -->
        <prudent>true</prudent>
        <!-- 按天新建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_HOME}/glog.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <!-- 保留30天的历史日志 -->
            <maxHistory>30</maxHistory>
            <!-- 日志文件大于1GB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1GB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- %ex就是指抛出的异常，full是显示全部，如果在{}中写入数字，则表示展示多少行 -->
            <pattern>%-4date [%thread] %-5level %logger{35} - %msg%n%ex{full, DISPLAY_EX_EVAL}</pattern>
        </encoder>
    </appender>
    
    <!--日志异步到数据库 -->
    <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <!--日志异步到数据库 -->
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <!--连接池 -->
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <driverClass>com.mysql.jdbc.Driver</driverClass>
                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
                <user>root</user>
                <password>root</password>
            </dataSource>
        </connectionSource>
    </appender>



    <!-- ##################### logger ##################### -->
    <!-- 参数
            name             logger管辖范围，根路径
            level            日志展示级别
            additivity       true表示当前logger的appender-ref和root的appender-ref都有效
    -->
    <logger name="org.whb.spring" level="INFO" additivity="false">
        <!-- 连接输出源 -->
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.whb.spring.boot.web.SpringBootWebApplication" level="debug" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ROLLING_FILE" />
        <appender-ref ref="HTML_FILE" />
    </logger>

    <!-- hibernate log -->
    <!-- 
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />
    <logger name="org.hibernate.SQL" level="DEBUG" />
    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />
    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />
    -->

    <!-- myibatis log -->
    <!--
    <logger name="com.apache.ibatis" level="TRACE" />
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
    -->



    <!-- ##################### logger ##################### -->
    <!-- 所有logger没有管辖到的部分归root接管 -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
    
</configuration>